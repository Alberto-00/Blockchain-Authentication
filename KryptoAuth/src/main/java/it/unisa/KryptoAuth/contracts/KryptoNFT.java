package it.unisa.KryptoAuth.contracts;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class KryptoNFT extends Contract {
    public static final String BINARY = "6080604052668e1bc9bf0400006007556008805460ff191690553480156200002657600080fd5b50604080516020810190915260008152620000418162000087565b506200004f60003362000099565b6200007c7f2db9fd3d099848027c2383d0a083396f6c41510d7acfd92adc99b6cffcf31e966000620000a5565b600160055562000305565b600262000095828262000239565b5050565b620000958282620000f0565b600082815260036020526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b60008281526003602090815260408083206001600160a01b038516845290915290205460ff16620000955760008281526003602090815260408083206001600160a01b03851684529091529020805460ff19166001179055620001503390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b634e487b7160e01b600052604160045260246000fd5b600181811c90821680620001bf57607f821691505b602082108103620001e057634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200023457600081815260208120601f850160051c810160208610156200020f5750805b601f850160051c820191505b8181101562000230578281556001016200021b565b5050505b505050565b81516001600160401b0381111562000255576200025562000194565b6200026d81620002668454620001aa565b84620001e6565b602080601f831160018114620002a557600084156200028c5750858301515b600019600386901b1c1916600185901b17855562000230565b600085815260208120601f198616915b82811015620002d657888601518255948401946001909101908401620002b5565b5085821015620002f55787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61497e80620003156000396000f3fe6080604052600436106102665760003560e01c806355b9d44311610144578063a22cb465116100b6578063db0c87c91161007a578063db0c87c914610727578063dba1dcec14610747578063e985e9c51461075c578063f242432a146107a5578063f577a500146107c5578063fda432a3146107f857600080fd5b8063a22cb4651461069a578063ac10f5a3146106ba578063b434c574146106cf578063d1c53ced146106ef578063d547741f1461070757600080fd5b8063717375eb11610108578063717375eb146105fd57806374c817001461061257806391d148541461063257806398575188146106525780639c81e06014610672578063a217fddf1461068557600080fd5b806355b9d4431461055d5780635e1fab0f1461057d5780635fd4b08a1461059d5780636a61e5fc146105bd57806370480275146105dd57600080fd5b80632f2ff15d116101dd57806341f63bfd116101a157806341f63bfd1461049d5780634209fff1146104bd578063421b2d8b146104dd5780634e1273f4146104fd5780634ee077ae1461052a57806351ed82881461054a57600080fd5b80632f2ff15d1461040257806336568abe1461042257806338cc4831146104425780633c2b02ac1461045d57806340f1128b1461047d57600080fd5b80630e89341c1161022f5780630e89341c14610332578063248a9ca31461035257806324d7806c146103825780632890e0d7146103a25780632b07d76e146103c25780632eb2c2d6146103e257600080fd5b8062fdd58e1461026b57806301ffc9a71461029e578063047b07bf146102ce57806306f22b04146102f05780630b71adb514610310575b600080fd5b34801561027757600080fd5b5061028b6102863660046137f0565b61080b565b6040519081526020015b60405180910390f35b3480156102aa57600080fd5b506102be6102b9366004613830565b6108a4565b6040519015158152602001610295565b3480156102da57600080fd5b506102e36108af565b604051610295919061389d565b3480156102fc57600080fd5b506102be61030b366004613965565b6109d1565b34801561031c57600080fd5b5061033061032b3660046139d8565b610aaf565b005b34801561033e57600080fd5b506102e361034d366004613a04565b610cd0565b34801561035e57600080fd5b5061028b61036d366004613a04565b60009081526003602052604090206001015490565b34801561038e57600080fd5b506102be61039d366004613a1d565b610d64565b3480156103ae57600080fd5b506103306103bd366004613a04565b610d70565b3480156103ce57600080fd5b506103306103dd366004613a48565b610ec8565b3480156103ee57600080fd5b506103306103fd366004613af7565b610f00565b34801561040e57600080fd5b5061033061041d3660046139d8565b610f4c565b34801561042e57600080fd5b5061033061043d3660046139d8565b610f71565b34801561044e57600080fd5b50604051338152602001610295565b34801561046957600080fd5b506102e3610478366004613a1d565b610feb565b34801561048957600080fd5b506102be610498366004613965565b6110e6565b3480156104a957600080fd5b506102e36104b8366004613a04565b6110f1565b3480156104c957600080fd5b506102be6104d8366004613a1d565b611272565b3480156104e957600080fd5b506103306104f8366004613a1d565b61128c565b34801561050957600080fd5b5061051d610518366004613ba0565b61136b565b6040516102959190613ca5565b34801561053657600080fd5b50610330610545366004613a04565b611494565b610330610558366004613a04565b6115fc565b34801561056957600080fd5b50610330610578366004613a04565b6118b0565b34801561058957600080fd5b50610330610598366004613a1d565b6119c2565b3480156105a957600080fd5b506102e36105b8366004613a1d565b611a7c565b3480156105c957600080fd5b506103306105d8366004613a04565b611aff565b3480156105e957600080fd5b506103306105f8366004613a1d565b611b29565b34801561060957600080fd5b5061028b611beb565b34801561061e57600080fd5b5061033061062d366004613cb8565b611c23565b34801561063e57600080fd5b506102be61064d3660046139d8565b611eef565b34801561065e57600080fd5b5061033061066d366004613a1d565b611f1a565b610330610680366004613a04565b611fed565b34801561069157600080fd5b5061028b600081565b3480156106a657600080fd5b506103306106b5366004613d7f565b61210a565b3480156106c657600080fd5b5061028b612115565b3480156106db57600080fd5b506103306106ea366004613a04565b612170565b3480156106fb57600080fd5b5060085460ff166102be565b34801561071357600080fd5b506103306107223660046139d8565b6121eb565b34801561073357600080fd5b50610330610742366004613965565b612210565b34801561075357600080fd5b506102e36122f1565b34801561076857600080fd5b506102be610777366004613da9565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b3480156107b157600080fd5b506103306107c0366004613dd3565b612420565b3480156107d157600080fd5b506102be6107e0366004613a04565b60009081526009602052604090206008015442111590565b610330610806366004613a04565b612465565b60006001600160a01b03831661087b5760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b60648201526084015b60405180910390fd5b506000818152602081815260408083206001600160a01b03861684529091529020545b92915050565b600061089e82612579565b606060006040516020016108ca90605b60f81b815260010190565b604051602081830303815290604052905060006108e660065490565b90506000805b828110156109a75761091e3360096000610907856001613e4d565b81526020019081526020016000206000015461080b565b600103610995578161096357600191508361093c6104b88385613e4d565b60405160200161094d929190613e7c565b6040516020818303038152906040529350610995565b836109726104b8836001613e4d565b604051602001610983929190613eab565b60405160208183030381529060405293505b8061099f81613ee7565b9150506108ec565b50826040516020016109b99190613f00565b60408051601f19818403018152919052949350505050565b60006109dc84611272565b8015610a285750816040516020016109f49190613f25565b60408051601f1981840301815291815281516020928301206001600160a01b03871660009081526004909352912060020154145b8015610a97575082604051602001610a409190613f25565b60408051601f1981840301815282825280516020918201206001600160a01b038816600090815260048352929092209192610a7f926001019101613fee565b60405160208183030381529060405280519060200120145b15610aa457506001610aa8565b5060005b9392505050565b610ab833610d64565b610ad45760405162461bcd60e51b815260040161087290613ffa565b60008211610af45760405162461bcd60e51b815260040161087290614029565b600082815260096020526040812090610b0d338561080b565b11610b2a5760405162461bcd60e51b815260040161087290614055565b610b3382611272565b610b7f5760405162461bcd60e51b815260206004820152601a60248201527f5468697320616464726573732069736e277420616e20557365720000000000006044820152606401610872565b60028101546001600160a01b03838116911614610bd35760405162461bcd60e51b81526020600482015260126024820152715573657220616464726573732077726f6e6760701b6044820152606401610872565b600a81015460ff1615610c1b5760405162461bcd60e51b815260206004820152601060248201526f13919508185b1c9958591e481cdbdb1960821b6044820152606401610872565b600a8101805460ff19166001908117909155600382018054610ccb923392869288929190610c4890613f41565b80601f0160208091040260200160405190810160405280929190818152602001828054610c7490613f41565b8015610cc15780601f10610c9657610100808354040283529160200191610cc1565b820191906000526020600020905b815481529060010190602001808311610ca457829003601f168201915b5050505050612420565b505050565b606060028054610cdf90613f41565b80601f0160208091040260200160405190810160405280929190818152602001828054610d0b90613f41565b8015610d585780601f10610d2d57610100808354040283529160200191610d58565b820191906000526020600020905b815481529060010190602001808311610d3b57829003601f168201915b50505050509050919050565b600061089e8183611eef565b610d7933610d64565b610d955760405162461bcd60e51b815260040161087290613ffa565b60008111610db55760405162461bcd60e51b815260040161087290614029565b6000610dc1338361080b565b11610dde5760405162461bcd60e51b815260040161087290614055565b6000818152600960205260409020600a81015460ff1615610e365760405162461bcd60e51b8152602060048201526012602482015271151bdad95b88185b1c9958591e481cdbdb1960721b6044820152606401610872565b60028101546001600160a01b031633148015610e665750600181015460028201546001600160a01b039081169116145b610ea75760405162461bcd60e51b815260206004820152601260248201527113919508185b1c9958591e48189bdd59da1d60721b6044820152606401610872565b600a8101805461ff001916610100179055610ec43383600161259e565b5050565b610ed133610d64565b610eed5760405162461bcd60e51b815260040161087290613ffa565b6008805460ff1916911515919091179055565b6001600160a01b038516331480610f1c5750610f1c8533610777565b610f385760405162461bcd60e51b81526004016108729061408c565b610f45858585858561271f565b5050505050565b600082815260036020526040902060010154610f67816128fc565b610ccb8383612906565b6001600160a01b0381163314610fe15760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610872565b610ec4828261298c565b6040805180820190915260018152605b60f81b6020820152606090600061101160065490565b90506000805b828110156110bb576110328660096000610907856001613e4d565b6001036110a957816110775760019150836110506104b88385613e4d565b604051602001611061929190613e7c565b60405160208183030381529060405293506110a9565b836110866104b8836001613e4d565b604051602001611097929190613eab565b60405160208183030381529060405293505b806110b381613ee7565b915050611017565b50826040516020016110cd9190613f00565b60408051601f1981840301815291905295945050505050565b60006109dc84610d64565b6000818152600960205260408120546060919061110d906129f3565b600084815260096020526040902060010154611131906001600160a01b0316612a85565b600085815260096020526040902060020154611155906001600160a01b0316612a85565b6000868152600960205260409020600781015460038201916005810191600482019160060190611184906129f3565b60008b81526009602052604090206008015461119f90612c94565b6040516020016111b7999897969594939291906140da565b6040516020818303038152906040529050806111e860096000868152602001908152602001600020600901546129f3565b6040516020016111f9929190614239565b60408051601f198184030181529181526000858152600960205220600a015490915060ff161561124a57806040516020016112349190614297565b604051602081830303815290604052905061089e565b8060405160200161125b91906142c1565b604051602081830303815290604052905092915050565b600061089e60008051602061492983398151915283611eef565b61129533610d64565b6112b15760405162461bcd60e51b815260040161087290613ffa565b6001600160a01b03808216600081815260046020526040902054909116146112eb5760405162461bcd60e51b8152600401610872906142ec565b61130360008051602061492983398151915282611eef565b156113505760405162461bcd60e51b815260206004820152601a60248201527f4163636f756e7420616c726561647920697320616e20557365720000000000006044820152606401610872565b61136860008051602061492983398151915282610f4c565b50565b606081518351146113d05760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b6064820152608401610872565b600083516001600160401b038111156113eb576113eb6138b0565b604051908082528060200260200182016040528015611414578160200160208202803683370190505b50905060005b845181101561148c5761145f8582815181106114385761143861431c565b60200260200101518583815181106114525761145261431c565b602002602001015161080b565b8282815181106114715761147161431c565b602090810291909101015261148581613ee7565b905061141a565b509392505050565b61149d33611272565b6114b95760405162461bcd60e51b815260040161087290614332565b600081116114d95760405162461bcd60e51b815260040161087290614029565b6000818152600960205260408120906114f2338461080b565b1161150f5760405162461bcd60e51b815260040161087290614055565b6000828152600960205260409020600801544211156115405760405162461bcd60e51b815260040161087290614360565b6001810154611557906001600160a01b0316610d64565b156115ab57600a8101805460ff191690556001808201546002830180546001600160a01b0319166001600160a01b0390921691821790556003830180546115a6933393928792610c4890613f41565b6115c8565b600a8101805461ff0019166101001790556115c83383600161259e565b610ec433600083600701546040518060400160405280600b81526020016a25b93cb83a37aa37b5b2b760a91b815250612d03565b61160533611272565b6116215760405162461bcd60e51b815260040161087290614332565b611629612e0e565b60085460ff1661167b5760405162461bcd60e51b815260206004820152601960248201527f546865206d61726b6574706c61636520697320636c6f736564000000000000006044820152606401610872565b6000811161169b5760405162461bcd60e51b815260040161087290614029565b6000818152600960205260409020600a810154610100900460ff16156116f75760405162461bcd60e51b815260206004820152601160248201527013919508191bd95cdb89dd08195e1a5cdd607a1b6044820152606401610872565b806007015461170733600061080b565b10156117495760405162461bcd60e51b81526020600482015260116024820152704e6f7420656e6f75676820746f6b656e7360781b6044820152606401610872565b600181015460028201546001600160a01b039081169116146117a05760405162461bcd60e51b815260206004820152601060248201526f13919508185b1c9958591e481cdbdb1960821b6044820152606401610872565b60018101546117b7906001600160a01b0316610d64565b6117fc5760405162461bcd60e51b815260206004820152601660248201527529b2b63632b91034b9903737ba1030b71020b236b4b760511b6044820152606401610872565b60008281526009602052604090206008015442111561182d5760405162461bcd60e51b815260040161087290614360565b6002810180546001600160a01b031916339081179091556007820154611856919060009061259e565b600181015460078083015490546001600160a01b03909216916108fc9161187c91614388565b6040518115909202916000818181858888f193505050501580156118a4573d6000803e3d6000fd5b50506113686001600555565b6118b933611272565b6118d55760405162461bcd60e51b815260040161087290614332565b600081116118f55760405162461bcd60e51b815260040161087290614029565b60008181526009602052604081209061190e338461080b565b1161192b5760405162461bcd60e51b815260040161087290614055565b60008281526009602052604090206008015442111561195c5760405162461bcd60e51b815260040161087290614360565b6001810154611973906001600160a01b0316610d64565b15610ea757600a8101805460ff191690556001808201546002830180546001600160a01b0319166001600160a01b039092169182179055600383018054610ec4933393928792610c4890613f41565b6119cb33610d64565b6119e75760405162461bcd60e51b815260040161087290613ffa565b6001600160a01b0380821660008181526004602052604090205490911614611a215760405162461bcd60e51b8152600401610872906142ec565b611a2c600082611eef565b611a715760405162461bcd60e51b815260206004820152601660248201527520b1b1b7bab73a1034b9b713ba1030b71020b236b4b760511b6044820152606401610872565b611368600082610f71565b6060611a8782610d64565b80611a965750611a9682611272565b611ad95760405162461bcd60e51b81526020600482015260146024820152734164647265737320776974686f757420726f6c6560601b6044820152606401610872565b6001600160a01b03821660009081526004602052604090206001018054610cdf90613f41565b611b0833610d64565b611b245760405162461bcd60e51b815260040161087290613ffa565b600755565b611b3233610d64565b611b4e5760405162461bcd60e51b815260040161087290613ffa565b6001600160a01b0380821660008181526004602052604090205490911614611b885760405162461bcd60e51b8152600401610872906142ec565b611b93600082611eef565b15611be05760405162461bcd60e51b815260206004820152601b60248201527f4163636f756e7420616c726561647920697320616e2041646d696e00000000006044820152606401610872565b611368600082610f4c565b6000611bf633611272565b611c125760405162461bcd60e51b815260040161087290614332565b611c1d33600061080b565b90505b90565b611c2c33610d64565b611c485760405162461bcd60e51b815260040161087290613ffa565b600082118015611c585750600083115b611cbb5760405162461bcd60e51b815260206004820152602e60248201527f44617973206c696d697420616e64207072696365206d7573742062652067726560448201526d61746572207468616e207a65726f60901b6064820152608401610872565b600481118015611ccb5750603381105b611d045760405162461bcd60e51b815260206004820152600a60248201526929b0b6329032b93937b960b11b6044820152606401610872565b611d12600680546001019055565b6000611d1d60065490565b9050611d29338261080b565b15611d6a5760405162461bcd60e51b815260206004820152601160248201527013919508185b1c9958591e48195e1a5cdd607a1b6044820152606401610872565b611d77338260018b612d03565b604051806101800160405280828152602001336001600160a01b03168152602001336001600160a01b031681526020018981526020018681526020018881526020018781526020018581526020018462015180611dd49190614388565b611dde9042613e4d565b81526020808201859052600060408084018290526060938401829052858252600983529081902084518155918401516001830180546001600160a01b03199081166001600160a01b0393841617909155918501516002840180549093169116179055908201516003820190611e5390826143e5565b5060808201516004820190611e6890826143e5565b5060a08201516005820190611e7d90826143e5565b5060c08201516006820190611e9290826143e5565b5060e082015160078201556101008083015160088301556101208301516009830155610140830151600a90920180546101609094015161ffff1990941692151561ff00191692909217921515029190911790555050505050505050565b60009182526003602090815260408084206001600160a01b0393909316845291905290205460ff1690565b611f2333610d64565b611f3f5760405162461bcd60e51b815260040161087290613ffa565b6001600160a01b0380821660008181526004602052604090205490911614611f795760405162461bcd60e51b8152600401610872906142ec565b611f9160008051602061492983398151915282611eef565b611fd55760405162461bcd60e51b815260206004820152601560248201527420b1b1b7bab73a1034b9b713ba1030b7102ab9b2b960591b6044820152606401610872565b611368600080516020614929833981519152826121eb565b611ff633611272565b6120125760405162461bcd60e51b815260040161087290614332565b61201a612e0e565b600081116120745760405162461bcd60e51b815260206004820152602160248201527f416d6f756e7473206d7573742062652067726561746572207468616e207a65726044820152606f60f81b6064820152608401610872565b806007546120829190614388565b34146120d05760405162461bcd60e51b815260206004820152601c60248201527f57524f4e4721204e6f7420656e6f756768206d6f6e65792073656e74000000006044820152606401610872565b612100336000836040518060400160405280600b81526020016a25b93cb83a37aa37b5b2b760a91b815250612d03565b6113686001600555565b610ec4338383612e67565b60008061212160065490565b90506000805b82811015612169576121423360096000610907856001613e4d565b600103612157578161215381613ee7565b9250505b8061216181613ee7565b915050612127565b5092915050565b61217933611272565b6121955760405162461bcd60e51b815260040161087290614332565b600081116121b55760405162461bcd60e51b815260040161087290614029565b6000818152600960205260408120906121ce338461080b565b11610ea75760405162461bcd60e51b815260040161087290614055565b600082815260036020526040902060010154612206816128fc565b610ccb838361298c565b6001600160a01b038084166000818152600460205260409020549091160361226f5760405162461bcd60e51b8152602060048201526012602482015271185b1c9958591e481c9959da5cdd195c995960721b6044820152606401610872565b6001600160a01b038316600081815260046020526040902080546001600160a01b03191690911781556001016122a583826143e5565b50806040516020016122b79190613f25565b60408051601f1981840301815291815281516020928301206001600160a01b03909516600090815260049092529020600201929092555050565b6040805180820190915260018152605b60f81b6020820152606090600061231760065490565b90506000805b828110156109a75760096000612334836001613e4d565b81526020810191909152604001600020600a015460ff16158015612399575061239560096000612365846001613e4d565b8152602081019190915260400160009081206001908101546001600160a01b031691600991610907908690613e4d565b6001145b1561240e57816123dc5760019150836123b56104b88385613e4d565b6040516020016123c6929190613e7c565b604051602081830303815290604052935061240e565b836123eb6104b8836001613e4d565b6040516020016123fc929190613eab565b60405160208183030381529060405293505b8061241881613ee7565b91505061231d565b6001600160a01b03851633148061243c575061243c8533610777565b6124585760405162461bcd60e51b81526004016108729061408c565b610f458585858585612f47565b61246e33611272565b61248a5760405162461bcd60e51b815260040161087290614332565b612492612e0e565b600081116124da5760405162461bcd60e51b81526020600482015260156024820152740416d6f756e74732068617665206e6f74206265203605c1b6044820152606401610872565b806124e633600061080b565b10156125275760405162461bcd60e51b815260206004820152601060248201526f2737ba1032b737bab3b4103a37b5b2b760811b6044820152606401610872565b6125333360008361259e565b60075433906108fc906125469084614388565b6040518115909202916000818181858888f1935050505015801561256e573d6000803e3d6000fd5b506113686001600555565b60006001600160e01b03198216637965db0b60e01b148061089e575061089e82613071565b6001600160a01b0383166126005760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b6064820152608401610872565b33600061260c846130c1565b90506000612619846130c1565b60408051602080820183526000918290528882528181528282206001600160a01b038b16835290522054909150848110156126a25760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b6064820152608401610872565b6000868152602081815260408083206001600160a01b038b81168086529184528285208a8703905582518b81529384018a90529092908816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46040805160208101909152600090525b50505050505050565b81518351146127815760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b6064820152608401610872565b6001600160a01b0384166127a75760405162461bcd60e51b8152600401610872906144a4565b3360005b845181101561288e5760008582815181106127c8576127c861431c565b6020026020010151905060008583815181106127e6576127e661431c565b602090810291909101810151600084815280835260408082206001600160a01b038e1683529093529190912054909150818110156128365760405162461bcd60e51b8152600401610872906144e9565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290612873908490613e4d565b925050819055505050508061288790613ee7565b90506127ab565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516128de929190614533565b60405180910390a46128f481878787878761310c565b505050505050565b6113688133613267565b6129108282611eef565b610ec45760008281526003602090815260408083206001600160a01b03851684529091529020805460ff191660011790556129483390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6129968282611eef565b15610ec45760008281526003602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60606000612a00836132c0565b60010190506000816001600160401b03811115612a1f57612a1f6138b0565b6040519080825280601f01601f191660200182016040528015612a49576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084612a5357509392505050565b604051606082811b6bffffffffffffffffffffffff191660208301529060009060340160408051808303601f19018152602a80845260608401909252925060009190602082018180368337019050509050600360fc1b81600081518110612aee57612aee61431c565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110612b1d57612b1d61431c565b60200101906001600160f81b031916908160001a90535060005b601481101561148c5760006010848381518110612b5657612b5661431c565b0160200151612b68919060f81c614577565b90506000612b77826010614599565b858481518110612b8957612b8961431c565b0160200151612b9b919060f81c6145b5565b90506000600a8360ff1610612bbd57612bb58360576145ce565b60f81b612bcc565b612bc88360306145ce565b60f81b5b90506000600a8360ff1610612bee57612be68360576145ce565b60f81b612bfd565b612bf98360306145ce565b60f81b5b90508086612c0c876002614388565b612c17906003613e4d565b81518110612c2757612c2761431c565b60200101906001600160f81b031916908160001a9053508186612c4b876002614388565b612c56906002613e4d565b81518110612c6657612c6661431c565b60200101906001600160f81b031916908160001a905350505050508080612c8c90613ee7565b915050612b37565b60606000612ca183613398565b90506000612cae846133bb565b90506000612cbb856133d9565b9050612cc6816129f3565b612ccf836129f3565b612cd8856129f3565b604051602001612cea939291906145e7565b6040516020818303038152906040529350505050919050565b6001600160a01b038416612d635760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b6064820152608401610872565b336000612d6f856130c1565b90506000612d7c856130c1565b90506000868152602081815260408083206001600160a01b038b16845290915281208054879290612dae908490613e4d565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4612716836000898989896133f8565b600260055403612e605760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610872565b6002600555565b816001600160a01b0316836001600160a01b031603612eda5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b6064820152608401610872565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b038416612f6d5760405162461bcd60e51b8152600401610872906144a4565b336000612f79856130c1565b90506000612f86856130c1565b90506000868152602081815260408083206001600160a01b038c16845290915290205485811015612fc95760405162461bcd60e51b8152600401610872906144e9565b6000878152602081815260408083206001600160a01b038d8116855292528083208985039055908a16825281208054889290613006908490613e4d565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4613066848a8a8a8a8a6133f8565b505050505050505050565b60006001600160e01b03198216636cdb3d1360e11b14806130a257506001600160e01b031982166303a24d0760e21b145b8061089e57506301ffc9a760e01b6001600160e01b031983161461089e565b604080516001808252818301909252606091600091906020808301908036833701905050905082816000815181106130fb576130fb61431c565b602090810291909101015292915050565b6001600160a01b0384163b156128f45760405163bc197c8160e01b81526001600160a01b0385169063bc197c81906131509089908990889088908890600401614641565b6020604051808303816000875af192505050801561318b575060408051601f3d908101601f191682019092526131889181019061469f565b60015b613237576131976146bc565b806308c379a0036131d057506131ab6146d7565b806131b657506131d2565b8060405162461bcd60e51b8152600401610872919061389d565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b6064820152608401610872565b6001600160e01b0319811663bc197c8160e01b146127165760405162461bcd60e51b815260040161087290614755565b6132718282611eef565b610ec45761327e816134b3565b6132898360206134c5565b60405160200161329a92919061479d565b60408051601f198184030181529082905262461bcd60e51b82526108729160040161389d565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106132ff5772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef8100000000831061332b576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061334957662386f26fc10000830492506010015b6305f5e1008310613361576305f5e100830492506008015b612710831061337557612710830492506004015b60648310613387576064830492506002015b600a831061089e5760010192915050565b600080806133b16133ac6201518086614812565b613660565b9695505050505050565b600080806133cf6133ac6201518086614812565b5095945050505050565b600080806133ed6133ac6201518086614812565b509095945050505050565b6001600160a01b0384163b156128f45760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e619061343c9089908990889088908890600401614826565b6020604051808303816000875af1925050508015613477575060408051601f3d908101601f191682019092526134749181019061469f565b60015b613483576131976146bc565b6001600160e01b0319811663f23a6e6160e01b146127165760405162461bcd60e51b815260040161087290614755565b606061089e6001600160a01b03831660145b606060006134d4836002614388565b6134df906002613e4d565b6001600160401b038111156134f6576134f66138b0565b6040519080825280601f01601f191660200182016040528015613520576020820181803683370190505b509050600360fc1b8160008151811061353b5761353b61431c565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061356a5761356a61431c565b60200101906001600160f81b031916908160001a905350600061358e846002614388565b613599906001613e4d565b90505b6001811115613611576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106135cd576135cd61431c565b1a60f81b8282815181106135e3576135e361431c565b60200101906001600160f81b031916908160001a90535060049490941c9361360a8161486b565b905061359c565b508315610aa85760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610872565b60008080838162253d8c6136778362010bd9614882565b6136819190614882565b9050600062023ab16136948360046148aa565b61369e91906148da565b905060046136af8262023ab16148aa565b6136ba906003614882565b6136c491906148da565b6136ce9083614908565b9150600062164b096136e1846001614882565b6136ed90610fa06148aa565b6136f791906148da565b90506004613707826105b56148aa565b61371191906148da565b61371b9084614908565b61372690601f614882565b9250600061098f6137388560506148aa565b61374291906148da565b9050600060506137548361098f6148aa565b61375e91906148da565b6137689086614908565b9050613775600b836148da565b945061378285600c6148aa565b61378d836002614882565b6137979190614908565b915084836137a6603187614908565b6137b19060646148aa565b6137bb9190614882565b6137c59190614882565b9a919950975095505050505050565b80356001600160a01b03811681146137eb57600080fd5b919050565b6000806040838503121561380357600080fd5b61380c836137d4565b946020939093013593505050565b6001600160e01b03198116811461136857600080fd5b60006020828403121561384257600080fd5b8135610aa88161381a565b60005b83811015613868578181015183820152602001613850565b50506000910152565b6000815180845261388981602086016020860161384d565b601f01601f19169290920160200192915050565b602081526000610aa86020830184613871565b634e487b7160e01b600052604160045260246000fd5b601f8201601f191681016001600160401b03811182821017156138eb576138eb6138b0565b6040525050565b600082601f83011261390357600080fd5b81356001600160401b0381111561391c5761391c6138b0565b604051613933601f8301601f1916602001826138c6565b81815284602083860101111561394857600080fd5b816020850160208301376000918101602001919091529392505050565b60008060006060848603121561397a57600080fd5b613983846137d4565b925060208401356001600160401b038082111561399f57600080fd5b6139ab878388016138f2565b935060408601359150808211156139c157600080fd5b506139ce868287016138f2565b9150509250925092565b600080604083850312156139eb57600080fd5b823591506139fb602084016137d4565b90509250929050565b600060208284031215613a1657600080fd5b5035919050565b600060208284031215613a2f57600080fd5b610aa8826137d4565b803580151581146137eb57600080fd5b600060208284031215613a5a57600080fd5b610aa882613a38565b60006001600160401b03821115613a7c57613a7c6138b0565b5060051b60200190565b600082601f830112613a9757600080fd5b81356020613aa482613a63565b604051613ab182826138c6565b83815260059390931b8501820192828101915086841115613ad157600080fd5b8286015b84811015613aec5780358352918301918301613ad5565b509695505050505050565b600080600080600060a08688031215613b0f57600080fd5b613b18866137d4565b9450613b26602087016137d4565b935060408601356001600160401b0380821115613b4257600080fd5b613b4e89838a01613a86565b94506060880135915080821115613b6457600080fd5b613b7089838a01613a86565b93506080880135915080821115613b8657600080fd5b50613b93888289016138f2565b9150509295509295909350565b60008060408385031215613bb357600080fd5b82356001600160401b0380821115613bca57600080fd5b818501915085601f830112613bde57600080fd5b81356020613beb82613a63565b604051613bf882826138c6565b83815260059390931b8501820192828101915089841115613c1857600080fd5b948201945b83861015613c3d57613c2e866137d4565b82529482019490820190613c1d565b96505086013592505080821115613c5357600080fd5b50613c6085828601613a86565b9150509250929050565b600081518084526020808501945080840160005b83811015613c9a57815187529582019590820190600101613c7e565b509495945050505050565b602081526000610aa86020830184613c6a565b600080600080600080600060e0888a031215613cd357600080fd5b87356001600160401b0380821115613cea57600080fd5b613cf68b838c016138f2565b985060208a0135915080821115613d0c57600080fd5b613d188b838c016138f2565b975060408a0135915080821115613d2e57600080fd5b613d3a8b838c016138f2565b965060608a0135915080821115613d5057600080fd5b50613d5d8a828b016138f2565b979a969950949760808101359660a0820135965060c090910135945092505050565b60008060408385031215613d9257600080fd5b613d9b836137d4565b91506139fb60208401613a38565b60008060408385031215613dbc57600080fd5b613dc5836137d4565b91506139fb602084016137d4565b600080600080600060a08688031215613deb57600080fd5b613df4866137d4565b9450613e02602087016137d4565b9350604086013592506060860135915060808601356001600160401b03811115613e2b57600080fd5b613b93888289016138f2565b634e487b7160e01b600052601160045260246000fd5b8082018082111561089e5761089e613e37565b60008151613e7281856020860161384d565b9290920192915050565b60008351613e8e81846020880161384d565b835190830190613ea281836020880161384d565b01949350505050565b60008351613ebd81846020880161384d565b600b60fa1b9083019081528351613edb81600184016020880161384d565b01600101949350505050565b600060018201613ef957613ef9613e37565b5060010190565b60008251613f1281846020870161384d565b605d60f81b920191825250600101919050565b60008251613f3781846020870161384d565b9190910192915050565b600181811c90821680613f5557607f821691505b602082108103613f7557634e487b7160e01b600052602260045260246000fd5b50919050565b60008154613f8881613f41565b60018281168015613fa05760018114613fb557613fe4565b60ff1984168752821515830287019450613fe4565b8560005260208060002060005b85811015613fdb5781548a820152908401908201613fc2565b50505082870194505b5050505092915050565b6000610aa88284613f7b565b6020808252601590820152742932b9ba3934b1ba32b2103a379030b236b4b7399760591b604082015260600190565b602080825260129082015271151a1a5cc81a5cc81b9bdd08185b8813919560721b604082015260600190565b6020808252601e908201527f546869732061646472657373206e6f7420686176652074686973204e46540000604082015260600190565b6020808252602e908201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60408201526d195c881bdc88185c1c1c9bdd995960921b606082015260800190565b6b3d913a37b5b2b724b2111d1160a11b8152895160009061410281600c850160208f0161384d565b6c1116101139b2b63632b9111d1160991b600c918401918201528a5161412f816019840160208f0161384d565b0161414b601982016b1116101137bbb732b9111d1160a11b9052565b614158602582018b613e60565b6a111610113730b6b2911d1160a91b81529050614178600b82018a613f7b565b6e1116101131b0ba32b3b7b93c911d1160891b8152905061419c600f820189613f7b565b69111610113ab936111d1160b11b815290506141bb600a820188613f7b565b71111610113232b9b1b934b83a34b7b7111d1160711b815290506141e26012820187613f7b565b6b11161011383934b1b2911d1160a11b81529050614203600c820186613e60565b70111610113b30b634b22ab73a34b6111d1160791b815290506142296011820185613e60565b9c9b505050505050505050505050565b6000835161424b81846020880161384d565b6a1116101139b0b632911d1160a91b908301908152835161427381600b84016020880161384d565b6a1116101139b7b632111d1160a91b600b9290910191820152601601949350505050565b600082516142a981846020870161384d565b6574727565227d60d01b920191825250600601919050565b600082516142d381846020870161384d565b6666616c7365227d60c81b920191825250600701919050565b6020808252601690820152751059191c995cdcc81b9bdd081c9959da5cdd195c995960521b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b6020808252601490820152732932b9ba3934b1ba32b2103a37903ab9b2b9399760611b604082015260600190565b6020808252600e908201526d139195081a5cc8195e1c1a5c995960921b604082015260600190565b808202811582820484141761089e5761089e613e37565b601f821115610ccb57600081815260208120601f850160051c810160208610156143c65750805b601f850160051c820191505b818110156128f4578281556001016143d2565b81516001600160401b038111156143fe576143fe6138b0565b6144128161440c8454613f41565b8461439f565b602080601f831160018114614447576000841561442f5750858301515b600019600386901b1c1916600185901b1785556128f4565b600085815260208120601f198616915b8281101561447657888601518255948401946001909101908401614457565b50858210156144945787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b6040815260006145466040830185613c6a565b82810360208401526145588185613c6a565b95945050505050565b634e487b7160e01b600052601260045260246000fd5b600060ff83168061458a5761458a614561565b8060ff84160491505092915050565b60ff818116838216029081169081811461216957612169613e37565b60ff828116828216039081111561089e5761089e613e37565b60ff818116838216019081111561089e5761089e613e37565b600084516145f981846020890161384d565b8083019050602d60f81b8082528551614619816001850160208a0161384d565b6001920191820152835161463481600284016020880161384d565b0160020195945050505050565b6001600160a01b0386811682528516602082015260a06040820181905260009061466d90830186613c6a565b828103606084015261467f8186613c6a565b905082810360808401526146938185613871565b98975050505050505050565b6000602082840312156146b157600080fd5b8151610aa88161381a565b600060033d1115611c205760046000803e5060005160e01c90565b600060443d10156146e55790565b6040516003193d81016004833e81513d6001600160401b03816024840111818411171561471457505050505090565b828501915081518181111561472c5750505050505090565b843d87010160208285010111156147465750505050505090565b6133ed602082860101876138c6565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516147d581601785016020880161384d565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161480681602884016020880161384d565b01602801949350505050565b60008261482157614821614561565b500490565b6001600160a01b03868116825285166020820152604081018490526060810183905260a06080820181905260009061486090830184613871565b979650505050505050565b60008161487a5761487a613e37565b506000190190565b80820182811260008312801582168215821617156148a2576148a2613e37565b505092915050565b80820260008212600160ff1b841416156148c6576148c6613e37565b818105831482151761089e5761089e613e37565b6000826148e9576148e9614561565b600160ff1b82146000198414161561490357614903613e37565b500590565b818103600083128015838313168383128216171561216957612169613e3756fe2db9fd3d099848027c2383d0a083396f6c41510d7acfd92adc99b6cffcf31e96a2646970667358221220b59ab38873a3d40772f8f49fddd083990727c24ebc6df7cddd66d2b919f7dc7664736f6c63430008110033";

    public static final String FUNC_DEFAULT_ADMIN_ROLE = "DEFAULT_ADMIN_ROLE";

    public static final String FUNC_ADDADMIN = "addAdmin";

    public static final String FUNC_ADDUSER = "addUser";

    public static final String FUNC_ASSIGNNFT = "assignNFT";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_BALANCEOFBATCH = "balanceOfBatch";

    public static final String FUNC_BURNNFT = "burnNFT";

    public static final String FUNC_BURNNFTUSER = "burnNFTUser";

    public static final String FUNC_BUYFT = "buyFt";

    public static final String FUNC_BUYNFT = "buyNFT";

    public static final String FUNC_FLIPSALESTATE = "flipSaleState";

    public static final String FUNC_GETADDRESS = "getAddress";

    public static final String FUNC_GETMYNFTS = "getMyNfts";

    public static final String FUNC_GETNAME = "getName";

    public static final String FUNC_GETNFT = "getNft";

    public static final String FUNC_GETNFTSADDR = "getNftsAddr";

    public static final String FUNC_GETNFTSALLADMIN = "getNftsAllAdmin";

    public static final String FUNC_GETROLEADMIN = "getRoleAdmin";

    public static final String FUNC_GETSIZEMYNFTS = "getSizeMyNfts";

    public static final String FUNC_GETTOKENSUSER = "getTokensUser";

    public static final String FUNC_GRANTROLE = "grantRole";

    public static final String FUNC_HASROLE = "hasRole";

    public static final String FUNC_ISADMIN = "isAdmin";

    public static final String FUNC_ISAPPROVEDFORALL = "isApprovedForAll";

    public static final String FUNC_ISMARKETPLACEACTIVE = "isMarketplaceActive";

    public static final String FUNC_ISUSER = "isUser";

    public static final String FUNC_ISVALID = "isValid";

    public static final String FUNC_LOGINADMIN = "loginAdmin";

    public static final String FUNC_LOGINUSER = "loginUser";

    public static final String FUNC_MINTNFT = "mintNft";

    public static final String FUNC_REGISTERUSER = "registerUser";

    public static final String FUNC_REMOVEUSER = "removeUser";

    public static final String FUNC_RENOUNCEADMIN = "renounceAdmin";

    public static final String FUNC_RENOUNCEROLE = "renounceRole";

    public static final String FUNC_REVOKEROLE = "revokeRole";

    public static final String FUNC_SAFEBATCHTRANSFERFROM = "safeBatchTransferFrom";

    public static final String FUNC_SAFETRANSFERFROM = "safeTransferFrom";

    public static final String FUNC_SELLFT = "sellFt";

    public static final String FUNC_SELLNFTUSER = "sellNFTUser";

    public static final String FUNC_SETAPPROVALFORALL = "setApprovalForAll";

    public static final String FUNC_SETTOKENPRICE = "setTokenPrice";

    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

    public static final String FUNC_URI = "uri";

    public static final String FUNC_USENFT = "useNFT";

    public static final Event APPROVALFORALL_EVENT = new Event("ApprovalForAll", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Bool>() {}));
    ;

    public static final Event ROLEADMINCHANGED_EVENT = new Event("RoleAdminChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Bytes32>(true) {}, new TypeReference<Bytes32>(true) {}));
    ;

    public static final Event ROLEGRANTED_EVENT = new Event("RoleGranted", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event ROLEREVOKED_EVENT = new Event("RoleRevoked", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event TRANSFERBATCH_EVENT = new Event("TransferBatch", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
    ;

    public static final Event TRANSFERSINGLE_EVENT = new Event("TransferSingle", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event URI_EVENT = new Event("URI", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>(true) {}));
    ;

    @Deprecated
    protected KryptoNFT(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected KryptoNFT(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected KryptoNFT(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected KryptoNFT(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<ApprovalForAllEventResponse> getApprovalForAllEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVALFORALL_EVENT, transactionReceipt);
        ArrayList<ApprovalForAllEventResponse> responses = new ArrayList<ApprovalForAllEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ApprovalForAllEventResponse>() {
            @Override
            public ApprovalForAllEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVALFORALL_EVENT, log);
                ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
                typedResponse.log = log;
                typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVALFORALL_EVENT));
        return approvalForAllEventFlowable(filter);
    }

    public List<RoleAdminChangedEventResponse> getRoleAdminChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ROLEADMINCHANGED_EVENT, transactionReceipt);
        ArrayList<RoleAdminChangedEventResponse> responses = new ArrayList<RoleAdminChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RoleAdminChangedEventResponse typedResponse = new RoleAdminChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.previousAdminRole = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.newAdminRole = (byte[]) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RoleAdminChangedEventResponse> roleAdminChangedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, RoleAdminChangedEventResponse>() {
            @Override
            public RoleAdminChangedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ROLEADMINCHANGED_EVENT, log);
                RoleAdminChangedEventResponse typedResponse = new RoleAdminChangedEventResponse();
                typedResponse.log = log;
                typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.previousAdminRole = (byte[]) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.newAdminRole = (byte[]) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RoleAdminChangedEventResponse> roleAdminChangedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ROLEADMINCHANGED_EVENT));
        return roleAdminChangedEventFlowable(filter);
    }

    public List<RoleGrantedEventResponse> getRoleGrantedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ROLEGRANTED_EVENT, transactionReceipt);
        ArrayList<RoleGrantedEventResponse> responses = new ArrayList<RoleGrantedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RoleGrantedEventResponse typedResponse = new RoleGrantedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RoleGrantedEventResponse> roleGrantedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, RoleGrantedEventResponse>() {
            @Override
            public RoleGrantedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ROLEGRANTED_EVENT, log);
                RoleGrantedEventResponse typedResponse = new RoleGrantedEventResponse();
                typedResponse.log = log;
                typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.sender = (String) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RoleGrantedEventResponse> roleGrantedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ROLEGRANTED_EVENT));
        return roleGrantedEventFlowable(filter);
    }

    public List<RoleRevokedEventResponse> getRoleRevokedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ROLEREVOKED_EVENT, transactionReceipt);
        ArrayList<RoleRevokedEventResponse> responses = new ArrayList<RoleRevokedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RoleRevokedEventResponse typedResponse = new RoleRevokedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RoleRevokedEventResponse> roleRevokedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, RoleRevokedEventResponse>() {
            @Override
            public RoleRevokedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ROLEREVOKED_EVENT, log);
                RoleRevokedEventResponse typedResponse = new RoleRevokedEventResponse();
                typedResponse.log = log;
                typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.sender = (String) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RoleRevokedEventResponse> roleRevokedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ROLEREVOKED_EVENT));
        return roleRevokedEventFlowable(filter);
    }

    public List<TransferBatchEventResponse> getTransferBatchEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFERBATCH_EVENT, transactionReceipt);
        ArrayList<TransferBatchEventResponse> responses = new ArrayList<TransferBatchEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferBatchEventResponse typedResponse = new TransferBatchEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.ids = (List<BigInteger>) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.values = (List<BigInteger>) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TransferBatchEventResponse> transferBatchEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, TransferBatchEventResponse>() {
            @Override
            public TransferBatchEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFERBATCH_EVENT, log);
                TransferBatchEventResponse typedResponse = new TransferBatchEventResponse();
                typedResponse.log = log;
                typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(2).getValue();
                typedResponse.ids = (List<BigInteger>) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.values = (List<BigInteger>) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TransferBatchEventResponse> transferBatchEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFERBATCH_EVENT));
        return transferBatchEventFlowable(filter);
    }

    public List<TransferSingleEventResponse> getTransferSingleEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFERSINGLE_EVENT, transactionReceipt);
        ArrayList<TransferSingleEventResponse> responses = new ArrayList<TransferSingleEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferSingleEventResponse typedResponse = new TransferSingleEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TransferSingleEventResponse> transferSingleEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, TransferSingleEventResponse>() {
            @Override
            public TransferSingleEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFERSINGLE_EVENT, log);
                TransferSingleEventResponse typedResponse = new TransferSingleEventResponse();
                typedResponse.log = log;
                typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(2).getValue();
                typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TransferSingleEventResponse> transferSingleEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFERSINGLE_EVENT));
        return transferSingleEventFlowable(filter);
    }

    public List<URIEventResponse> getURIEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(URI_EVENT, transactionReceipt);
        ArrayList<URIEventResponse> responses = new ArrayList<URIEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            URIEventResponse typedResponse = new URIEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.value = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<URIEventResponse> uRIEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, URIEventResponse>() {
            @Override
            public URIEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(URI_EVENT, log);
                URIEventResponse typedResponse = new URIEventResponse();
                typedResponse.log = log;
                typedResponse.id = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.value = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<URIEventResponse> uRIEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(URI_EVENT));
        return uRIEventFlowable(filter);
    }

    public RemoteFunctionCall<byte[]> DEFAULT_ADMIN_ROLE() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_DEFAULT_ADMIN_ROLE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<TransactionReceipt> addAdmin(String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ADDADMIN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, account)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> addUser(String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ADDUSER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, account)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> assignNFT(BigInteger _tokenId, String _addr) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ASSIGNNFT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_tokenId), 
                new org.web3j.abi.datatypes.Address(160, _addr)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> balanceOf(String account, BigInteger id) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BALANCEOF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, account), 
                new org.web3j.abi.datatypes.generated.Uint256(id)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<List> balanceOfBatch(List<String> accounts, List<BigInteger> ids) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BALANCEOFBATCH, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.datatypes.Address.class,
                        org.web3j.abi.Utils.typeMap(accounts, org.web3j.abi.datatypes.Address.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(ids, org.web3j.abi.datatypes.generated.Uint256.class))), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> burnNFT(BigInteger _tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_BURNNFT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> burnNFTUser(BigInteger _tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_BURNNFTUSER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> buyFt(BigInteger _amounts) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_BUYFT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_amounts)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, _amounts.multiply(BigInteger.valueOf(40000000000000000L)));
    }

    public RemoteFunctionCall<TransactionReceipt> buyNFT(BigInteger _tokenId, BigInteger _amounts) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_BUYNFT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, _amounts.multiply(BigInteger.valueOf(40000000000000000L)));
    }

    public RemoteFunctionCall<TransactionReceipt> flipSaleState(Boolean _flag) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_FLIPSALESTATE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Bool(_flag)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> getAddress() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETADDRESS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> getMyNfts() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETMYNFTS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> getName(String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETNAME, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, account)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> getNft(BigInteger _id) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETNFT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_id)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> getNftsAddr(String _addr) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETNFTSADDR, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _addr)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> getNftsAllAdmin() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETNFTSALLADMIN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<byte[]> getRoleAdmin(byte[] role) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETROLEADMIN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(role)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<BigInteger> getSizeMyNfts() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETSIZEMYNFTS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> getTokensUser() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETTOKENSUSER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> grantRole(byte[] role, String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_GRANTROLE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(role), 
                new org.web3j.abi.datatypes.Address(160, account)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> hasRole(byte[] role, String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_HASROLE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(role), 
                new org.web3j.abi.datatypes.Address(160, account)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> isAdmin(String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISADMIN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, account)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> isApprovedForAll(String account, String operator) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISAPPROVEDFORALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, account), 
                new org.web3j.abi.datatypes.Address(160, operator)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> isMarketplaceActive() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISMARKETPLACEACTIVE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> isUser(String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISUSER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, account)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> isValid(BigInteger _tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISVALID, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> loginAdmin(String _address, String _name, String _password) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_LOGINADMIN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _address), 
                new org.web3j.abi.datatypes.Utf8String(_name), 
                new org.web3j.abi.datatypes.Utf8String(_password)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> loginUser(String _address, String _name, String _password) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_LOGINUSER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _address), 
                new org.web3j.abi.datatypes.Utf8String(_name), 
                new org.web3j.abi.datatypes.Utf8String(_password)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> mintNft(String _name, String _category, String _description, String _url, BigInteger _price, BigInteger _daysLimit, BigInteger _sale) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_MINTNFT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_name), 
                new org.web3j.abi.datatypes.Utf8String(_category), 
                new org.web3j.abi.datatypes.Utf8String(_description), 
                new org.web3j.abi.datatypes.Utf8String(_url), 
                new org.web3j.abi.datatypes.generated.Uint256(_price), 
                new org.web3j.abi.datatypes.generated.Uint256(_daysLimit), 
                new org.web3j.abi.datatypes.generated.Uint256(_sale)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> registerUser(String _address, String _name, String _password) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_REGISTERUSER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _address), 
                new org.web3j.abi.datatypes.Utf8String(_name), 
                new org.web3j.abi.datatypes.Utf8String(_password)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> removeUser(String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_REMOVEUSER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, account)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceAdmin(String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RENOUNCEADMIN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, account)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceRole(byte[] role, String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RENOUNCEROLE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(role), 
                new org.web3j.abi.datatypes.Address(160, account)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> revokeRole(byte[] role, String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_REVOKEROLE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(role), 
                new org.web3j.abi.datatypes.Address(160, account)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeBatchTransferFrom(String from, String to, List<BigInteger> ids, List<BigInteger> amounts, byte[] data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SAFEBATCHTRANSFERFROM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(ids, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(amounts, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicBytes(data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to, BigInteger id, BigInteger amount, byte[] data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SAFETRANSFERFROM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(id), 
                new org.web3j.abi.datatypes.generated.Uint256(amount), 
                new org.web3j.abi.datatypes.DynamicBytes(data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> sellFt(BigInteger _amounts) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SELLFT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_amounts)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, _amounts.multiply(BigInteger.valueOf(40000000000000000L)));
    }

    public RemoteFunctionCall<TransactionReceipt> sellNFTUser(BigInteger _tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SELLNFTUSER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setApprovalForAll(String operator, Boolean approved) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETAPPROVALFORALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, operator), 
                new org.web3j.abi.datatypes.Bool(approved)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setTokenPrice(BigInteger _priceToken) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETTOKENPRICE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_priceToken)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> supportsInterface(byte[] interfaceId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SUPPORTSINTERFACE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes4(interfaceId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> uri(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_URI, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> useNFT(BigInteger _tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_USENFT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static KryptoNFT load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new KryptoNFT(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static KryptoNFT load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new KryptoNFT(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static KryptoNFT load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new KryptoNFT(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static KryptoNFT load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new KryptoNFT(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<KryptoNFT> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(KryptoNFT.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<KryptoNFT> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(KryptoNFT.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<KryptoNFT> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(KryptoNFT.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<KryptoNFT> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(KryptoNFT.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class ApprovalForAllEventResponse extends BaseEventResponse {
        public String account;

        public String operator;

        public Boolean approved;
    }

    public static class RoleAdminChangedEventResponse extends BaseEventResponse {
        public byte[] role;

        public byte[] previousAdminRole;

        public byte[] newAdminRole;
    }

    public static class RoleGrantedEventResponse extends BaseEventResponse {
        public byte[] role;

        public String account;

        public String sender;
    }

    public static class RoleRevokedEventResponse extends BaseEventResponse {
        public byte[] role;

        public String account;

        public String sender;
    }

    public static class TransferBatchEventResponse extends BaseEventResponse {
        public String operator;

        public String from;

        public String to;

        public List<BigInteger> ids;

        public List<BigInteger> values;
    }

    public static class TransferSingleEventResponse extends BaseEventResponse {
        public String operator;

        public String from;

        public String to;

        public BigInteger id;

        public BigInteger value;
    }

    public static class URIEventResponse extends BaseEventResponse {
        public BigInteger id;

        public String value;
    }
}
